  # amcl:
  #   ros__parameters:
  #     alpha1: 0.2
  #     alpha2: 0.2
  #     alpha3: 0.2
  #     alpha4: 0.2
  #     alpha5: 0.2
  #     base_frame_id: "base_footprint"
  #     beam_skip_distance: 0.5
  #     beam_skip_error_threshold: 0.9
  #     beam_skip_threshold: 0.3
  #     do_beamskip: false
  #     global_frame_id: "map"
  #     lambda_short: 0.1
  #     laser_likelihood_max_dist: 2.0
  #     laser_max_range: 100.0
  #     laser_min_range: -1.0
  #     laser_model_type: "likelihood_field"
  #     max_beams: 60
  #     max_particles: 2000
  #     min_particles: 500
  #     odom_frame_id: "odom"
  #     pf_err: 0.05
  #     pf_z: 0.99
  #     recovery_alpha_fast: 0.0
  #     recovery_alpha_slow: 0.0
  #     resample_interval: 1
  #     robot_model_type: "nav2_amcl::DifferentialMotionModel"
  #     save_pose_rate: 0.5
  #     sigma_hit: 0.2
  #     tf_broadcast: true
  #     transform_tolerance: 1.0
  #     update_min_a: 0.2
  #     update_min_d: 0.25
  #     z_hit: 0.5
  #     z_max: 0.05
  #     z_rand: 0.5
  #     z_short: 0.05
  #     scan_topic: /velodyne_points
  #     scan_topic_type: "PointCloud2"

  bt_navigator:
    ros__parameters:
      global_frame: "map"
      robot_base_frame: "base_link"
      odom_topic: "/diablo/odom"
      bt_loop_duration: 10
      default_server_timout: 20
      transform_tolerance: 0.1
      default_nav_to_pose_bt_xml: $(find-pkg-share my_package)/behavior_tree/my_nav_to_pose_bt.xml
      default_nav_through_poses_bt_xml: $(find-pkg-share my_package)/behavior_tree/my_nav_through_poses_bt.xml
      goal_blackboard_id: goal
      goals_blackboard_id: goals
      path_blackboard_id: path
      navigators: ['navigate_to_pose', 'navigate_through_poses']
      navigate_to_pose:
        plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
      navigate_through_poses:
        plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
      plugin_lib_names:
        - nav2_compute_path_to_pose_action_bt_node
        - nav2_compute_path_through_poses_action_bt_node
        - nav2_smooth_path_action_bt_node
        - nav2_follow_path_action_bt_node
        - nav2_spin_action_bt_node
        - nav2_wait_action_bt_node
        - nav2_assisted_teleop_action_bt_node
        - nav2_back_up_action_bt_node
        - nav2_drive_on_heading_bt_node
        - nav2_clear_costmap_service_bt_node
        - nav2_is_stuck_condition_bt_node
        - nav2_goal_reached_condition_bt_node
        - nav2_goal_updated_condition_bt_node
        - nav2_globally_updated_goal_condition_bt_node
        - nav2_is_path_valid_condition_bt_node
        - nav2_initial_pose_received_condition_bt_node
        - nav2_reinitialize_global_localization_service_bt_node
        - nav2_rate_controller_bt_node
        - nav2_distance_controller_bt_node
        - nav2_speed_controller_bt_node
        - nav2_truncate_path_action_bt_node
        - nav2_truncate_path_local_action_bt_node
        - nav2_goal_updater_node_bt_node
        - nav2_recovery_node_bt_node
        - nav2_pipeline_sequence_bt_node
        - nav2_round_robin_node_bt_node
        - nav2_transform_available_condition_bt_node
        - nav2_time_expired_condition_bt_node
        - nav2_path_expiring_timer_condition
        - nav2_distance_traveled_condition_bt_node
        - nav2_single_trigger_bt_node
        - nav2_goal_updated_controller_bt_node
        - nav2_is_battery_low_condition_bt_node
        - nav2_navigate_through_poses_action_bt_node
        - nav2_navigate_to_pose_action_bt_node
        - nav2_remove_passed_goals_action_bt_node
        - nav2_planner_selector_bt_node
        - nav2_controller_selector_bt_node
        - nav2_goal_checker_selector_bt_node
        - nav2_controller_cancel_bt_node
        - nav2_path_longer_on_approach_bt_node
        - nav2_wait_cancel_bt_node
        - nav2_spin_cancel_bt_node
        - nav2_back_up_cancel_bt_node
        - nav2_assisted_teleop_cancel_bt_node
        - nav2_drive_on_heading_cancel_bt_node
        - nav2_is_battery_charging_condition_bt_node  
      error_code_names:
        - compute_path_error_code
        - follow_path_error_code
        - smoother_error_code

  bt_navigator_navigate_through_poses_rclcpp_node:
    ros__parameters:
      use_sim_time: True

  bt_navigator_navigate_to_pose_rclcpp_node:
    ros__parameters:
      use_sim_time: True

  controller_server:
    ros__parameters:
      controller_frequency: 2.0
      min_x_velocity_threshold: 0.001
      min_y_velocity_threshold: 0.001
      min_theta_velocity_threshold: 0.001
      failure_tolerance: 0.3
      progress_checker_plugins: ["progress_checker"]
      goal_checker_plugins: ["general_goal_checker"]
      controller_plugins: ["FollowPath"]
      use_realtime_priority: false
      odom_topic: "/diablo/odom"

      progress_checker:
        # plugin: "nav2_controller::PoseProgressChecker"
        # required_movement_radius: 0.5
        # movement_time_allowance: 10.0
        plugin: "nav2_controller::PoseProgressChecker"  # Defaults are sensible

      general_goal_checker:
        stateful: True
        plugin: "nav2_controller::SimpleGoalChecker"
        xy_goal_tolerance: 0.25
        yaw_goal_tolerance: 0.1

      # DWB parameters
      FollowPath:
        plugin: "dwb_core::DWBLocalPlanner"
        debug_trajectory_details: True
        min_vel_x: -0.2
        min_vel_y: 0.0
        max_vel_x: 0.2
        max_vel_y: 0.0
        max_vel_theta: 0.4
        min_speed_xy: 0.0
        max_speed_xy: 0.4
        min_speed_theta: -0.4
        # Add high threshold velocity for turtlebot 3 issue.
        # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
        acc_lim_x: 2.5
        acc_lim_y: 0.0
        acc_lim_theta: 3.2
        decel_lim_x: -2.5
        decel_lim_y: 0.0
        decel_lim_theta: -3.2
        vx_samples: 40
        vy_samples: 15
        vtheta_samples: 40
        sim_time: 3.0
        #linear_granularity: 0.05
        #angular_granularity: 0.025
        transform_tolerance: 0.2
        xy_goal_tolerance: 0.25
        trans_stopped_velocity: 0.05
        #short_circuit_trajectory_evaluation: True
        stateful: True
        critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist", "PreferForward"]
        BaseObstacle.scale: 0.02
        PathAlign.scale: 32.0
        PathAlign.forward_point_distance: 0.1
        GoalAlign.scale: 24.0
        GoalAlign.forward_point_distance: 0.1
        PathDist.scale: 32.0
        GoalDist.scale: 24.0
        RotateToGoal.scale: 32.0
        RotateToGoal.slowing_factor: 0.0
        RotateToGoal.lookahead_time: 1.0
        ObstacleFootprint.scale: 0.01
        ObstacleFootprint.sum_scores: true
        PreferForward.theta_scale: 0.01
        PreferForward.strafe_x: 0.3
      # FollowPath:
      #   plugin: "nav2_mppi_controller::MPPIController"
      #   time_steps: 56
      #   model_dt: 0.05
      #   batch_size: 2000
      #   ax_max: 3.0
      #   ax_min: -3.0
      #   ay_max: 3.0
      #   az_max: 3.5
      #   vx_std: 0.2
      #   vy_std: 0.2
      #   wz_std: 0.4
      #   vx_max: 0.5
      #   vx_min: -0.35
      #   vy_max: 0.5
      #   wz_max: 1.9
      #   iteration_count: 1
      #   prune_distance: 1.7
      #   transform_tolerance: 0.1
      #   temperature: 0.3
      #   gamma: 0.015
      #   motion_model: "DiffDrive"
      #   visualize: true
      #   regenerate_noises: true
      #   TrajectoryVisualizer:
      #     trajectory_step: 5
      #     time_step: 3
      #   AckermannConstraints:
      #     min_turning_r: 0.2
      #   critics: [
      #     "ConstraintCritic", "CostCritic", "GoalCritic",
      #     "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
      #     "PathAngleCritic", "PreferForwardCritic"]
      #   ConstraintCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 4.0
      #   GoalCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 5.0
      #     threshold_to_consider: 1.4
      #   GoalAngleCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 3.0
      #     threshold_to_consider: 0.5
      #   PreferForwardCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 5.0
      #     threshold_to_consider: 0.5
      #   CostCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 3.81
      #     critical_cost: 300.0
      #     consider_footprint: true
      #     collision_cost: 1000000.0
      #     near_goal_distance: 1.0
      #     trajectory_point_step: 2
      #   PathAlignCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 14.0
      #     max_path_occupancy_ratio: 0.05
      #     trajectory_point_step: 4
      #     threshold_to_consider: 0.5
      #     offset_from_furthest: 20
      #     use_path_orientations: false
      #   PathFollowCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 5.0
      #     offset_from_furthest: 5
      #     threshold_to_consider: 1.4
      #   PathAngleCritic:
      #     enabled: true
      #     cost_power: 1
      #     cost_weight: 2.0
      #     offset_from_furthest: 4
      #     threshold_to_consider: 0.5
      #     max_angle_to_furthest: 1.0
      #     mode: 0

  local_costmap:
    local_costmap:
      ros__parameters:
        use_sim_time: True
        update_frequency: 5.0
        publish_frequency: 2.0
        global_frame: "odom"
        robot_base_frame: "base_link"
        map_topic: "/map"
        rolling_window: true
        width: 3
        height: 3
        resolution: 0.05
        robot_radius: 0.35
        plugins: ["voxel_layer", "inflation_layer"]
        #plugins: ["obstacle_layer", "inflation_layer", "voxel_layer"]
        inflation_layer:
          plugin: "nav2_costmap_2d::InflationLayer"
          enabled: True
          cost_scaling_factor: 3.0
          inflation_radius: 0.40
        voxel_layer:
          plugin: "nav2_costmap_2d::VoxelLayer"
          enabled: True
          publish_voxel_map: True
          #origin_x: -1.5
          #origin_y: -1.5
          origin_z: 0.0
          z_resolution: 0.05
          z_voxels: 16
          max_obstacle_height: 2.0
          mark_threshold: 0
          observation_sources: "pointcloud"
          pointcloud:
            topic: "/velodyne_points"
            max_obstacle_height: 1.0
            min_obstacle_height: 0.2
            clearing: True
            marking: True
            data_type: "PointCloud2"
            raytrace_max_range: 3.0
            raytrace_min_range: 0.0
            obstacle_max_range: 2.5
            obstacle_min_range: 0.0
        # obstacle_layer:
        #   plugin: "nav2_costmap_2d::ObstacleLayer"
        #   enabled: False
        #   observation_sources: "pointcloud"
        #   pointcloud:
        #     topic: /velodyne_points
        #     max_obstacle_height: 1.0
        #     clearing: True
        #     marking: True
        #     data_type: "PointCloud2"
        #     raytrace_max_range: 3.0
        #     raytrace_min_range: 0.0
        #     obstacle_max_range: 2.5
        #     obstacle_min_range: 0.0
        static_layer:
          plugin: "nav2_costmap_2d::StaticLayer"
          map_subscribe_transient_local: True
          #subscribe_to_updates: True
          #map_topic: "/map"
        always_send_full_costmap: True

  global_costmap:
    global_costmap:
      ros__parameters:
        update_frequency: 5.0
        publish_frequency: 2.0
        global_frame: "map"
        robot_base_frame: "base_link"
        robot_radius: 0.35
        resolution: 0.05
        use_sim_time: True
        track_unknown_space: true
        always_send_full_costmap: True
        #map_topic: "/map"
        #plugins: ["static_layer", "obstacle_layer", "inflation_layer", "voxel_layer"]
        plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
        obstacle_layer:
          plugin: "nav2_costmap_2d::ObstacleLayer"
          enabled: True
          observation_sources: "pointcloud"
          #combination_method: 0
          pointcloud:
            topic: /velodyne_points
            sensor_frame: lidar_link
            max_obstacle_height: 2.0
            min_obstacle_height: 0.2
            clearing: True
            marking: True
            data_type: "PointCloud2"
            raytrace_max_range: 3.0
            raytrace_min_range: 0.0
            obstacle_max_range: 2.5
            obstacle_min_range: 0.0
        # voxel_layer:
        #   plugin: "nav2_costmap_2d::VoxelLayer"
        #   enabled: True
        #   publish_voxel_map: True
        #   origin_z: -0.26
        #   z_resolution: 0.05
        #   z_voxels: 16
        #   max_obstacle_height: 1.0
        #   mark_threshold: 0
        #   observation_sources: "pointcloud"
        #   combination_method: 0
        #   pointcloud:
        #     topic: "/velodyne_points"
        #     max_obstacle_height: 1.0
        #     min_obstacle_height: 0.2
        #     clearing: True
        #     marking: True
        #     data_type: "PointCloud2"
        #     raytrace_max_range: 20.0
        #     raytrace_min_range: 0.0
        #     obstacle_max_range: 20.0
        #     obstacle_min_range: 0.0
        static_layer:
          plugin: "nav2_costmap_2d::StaticLayer"
          map_subscribe_transient_local: True
          #subscribe_to_updates: True
          #map_topic: "/map"
        inflation_layer:
          plugin: "nav2_costmap_2d::InflationLayer"
          cost_scaling_factor: 3.0
          inflation_radius: 0.55

  map_saver:
    ros__parameters:
      save_map_timeout: 5.0
      free_thresh_default: 0.25
      occupied_thresh_default: 0.65
      map_subscribe_transient_local: True
      use_sim_time: True

  planner_server:
    ros__parameters:
      expected_planner_frequency: 20.0
      planner_plugins: ["GridBased"]
      use_sim_time: True
      GridBased:
        plugin: "nav2_navfn_planner/NavfnPlanner"
        tolerance: 2.5
        use_astar: False
        allow_unknown: True
      # GridBased:
      #   plugin: "nav2_smac_planner/SmacPlanner2D" # In Iron and older versions, "/" was used instead of "::"
      #   tolerance: 0.125                      # tolerance for planning if unable to reach exact pose, in meters
      #   downsample_costmap: false             # whether or not to downsample the map
      #   downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      #   allow_unknown: true                   # allow traveling in unknown space
      #   max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      #   max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
      #   max_planning_time: 2.0                # max time in s for planner to plan, smooth
      #   cost_travel_multiplier: 2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      #   use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      #   smoother:
      #     max_iterations: 1000
      #     w_smooth: 0.3
      #     w_data: 0.2
      #     tolerance: 1.0e-10


  smoother_server:
    ros__parameters:
      smoother_plugins: ["simple_smoother"]
      simple_smoother:
        plugin: "nav2_smoother::SimpleSmoother"
        tolerance: 1.0e-10
        max_its: 1000
        do_refinement: True
      use_sim_time: True

  behavior_server:
    ros__parameters:
      local_costmap_topic: local_costmap/costmap_raw
      global_costmap_topic: global_costmap/costmap_raw
      local_footprint_topic: local_costmap/published_footprint
      global_footprint_topic: global_costmap/published_footprint
      cycle_frequency: 10.0
      behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
      spin:
        plugin: "nav2_behaviors/Spin"
      backup:
        plugin: "nav2_behaviors/BackUp"
      drive_on_heading:
        plugin: "nav2_behaviors/DriveOnHeading"
      wait:
        plugin: "nav2_behaviors/Wait"
      assisted_teleop:
        plugin: "nav2_behaviors/AssistedTeleop"
      #local_frame: "odom"
      global_frame: "odom"
      robot_base_frame: "base_link"
      transform_tolerance: 0.1
      simulate_ahead_time: 2.0
      max_rotational_vel: 1.0
      min_rotational_vel: 0.4
      rotational_acc_lim: 3.2

  waypoint_follower:
    ros__parameters:
      loop_rate: 20
      stop_on_failure: false
      #action_server_result_timeout: 900.0
      waypoint_task_executor_plugin: "wait_at_waypoint"
      wait_at_waypoint:
        plugin: "nav2_waypoint_follower::WaitAtWaypoint"
        enabled: True
        waypoint_pause_duration: 200
      use_sim_time: True

  velocity_smoother:
    ros__parameters:
      smoothing_frequency: 20.0
      scale_velocities: False
      feedback: "OPEN_LOOP"
      max_velocity: [0.5, 0.0, 2.0]
      min_velocity: [-0.5, 0.0, -2.0]
      max_accel: [2.5, 0.0, 3.2]
      max_decel: [-2.5, 0.0, -3.2]
      odom_topic: "/diablo/odom"
      odom_duration: 0.1
      deadband_velocity: [0.0, 0.0, 0.0]
      velocity_timeout: 1.0
      use_sim_time: True

  collision_monitor:
    ros__parameters:
      use_sim_time: True
      base_frame_id: "base_footprint"
      odom_frame_id: "odom"
      cmd_vel_in_topic: "cmd_vel_smoothed"
      cmd_vel_out_topic: "cmd_vel"
      state_topic: "collision_monitor_state"
      transform_tolerance: 0.2
      source_timeout: 1.0
      base_shift_correction: True
      stop_pub_timeout: 2.0
      polygons: ["FootprintApproach"]
      FootprintApproach:
        type: "polygon"
        action_type: "approach"
        footprint_topic: "local_costmap/published_footprint"
        time_before_collision: 5.0
        simulation_time_step: 0.1
        min_points: 6
        visualize: True
        enabled: True
      observation_sources: ["pointcloud"]
      pointcloud:
        type: "pointcloud"
        topic: "/velodyne_points"
        min_height: 0.2
        max_height: 1.0
        enabled: True
